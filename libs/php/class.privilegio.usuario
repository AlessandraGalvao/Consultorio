<?
class PrivilegioUsuario extends Usuario
{
    private $roles;
 
    public function __construct() {
        parent::__construct();
    }
 
    // reemplazar el mÃ©todo usuario
    public static function getByUsername($username) {
        $sql = "SELECT * FROM usuarios WHERE username = :username";
        $sth = $GLOBALS["DB"]->prepare($sql);
        $sth->execute(array(":username" => $username));
        $result = $sth->fetchAll();
 
        if (!empty($result)) {
            $privUser = new PrivilegedUser();
            $privUser->user_id = $result[0]["user_id"];
            $privUser->username = $username;
            $privUser->password = $result[0]["password"];
            $privUser->email_addr = $result[0]["email_addr"];
            $privUser->initRoles();
            return $privUser;
        } else {
            return false;
        }
    }
 
    // asosciando los roles con sus respectivos permisos
    protected function initRoles() {
        $this->roles = array();
        $sql = "SELECT t1.id_Rol, t2.nombre_rol FROM usuario_rol as t1
                JOIN roles as t2 ON t1.id_Rol = t2.id_Rol
                WHERE t1.user_id = :user_id";
        $sth = $GLOBALS["DB"]->prepare($sql);
        $sth->execute(array(":user_id" => $this->user_id));
 
        while($row = $sth->fetch(PDO::FETCH_ASSOC)) {
            $this->roles[$row["nombre_rol"]] = Role::getRolePerms($row["id_Rol"]);
        }
    }
 
    // check if user has a specific privilege
    public function hasPrivilege($perm) {
        foreach ($this->roles as $role) {
            if ($role->hasPerm($perm)) {
                return true;
            }
        }
        return false;
    }
}
?>
